/**
 * Add timer icon to a ticket card
 * @param {HTMLElement} cardElement - Any element within the card hierarchy
 */
addTimerToCard(cardElement) {
  // Find all elements in the card hierarchy
  const elements = this.findCardElements(cardElement);
  
  // If we couldn't find the ticket ID or card, exit
  if (!elements.ticketId || !elements.ticketCard) {
    console.warn('Could not find ticket ID or card element:', cardElement);
    return;
  }
  
  const ticketId = elements.ticketId;
  
  // Check if timer already exists
  if (elements.ticketCard.querySelector('.ticket-timer-icon')) {
    console.log(`Timer already exists for ticket ${ticketId}`);
    return;
  }
  
  // Check if timer data exists for this ticket
  const hasTime = window.timerManager && 
                 window.timerManager.ticketTimers[ticketId] && 
                 window.timerManager.ticketTimers[ticketId] > 0;
  
  const isActive = window.timerManager && 
                   window.timerManager.activeTicket === ticketId;
  
  // Capture ticket title
  const titleElement = elements.ticketCard.querySelector(CONFIG.selectors.cardTitleSelector);
  const ticketTitle = titleElement ? titleElement.textContent.trim() : `Ticket #${ticketId}`;
  
  // Store the title if TimerManager exists
  if (window.timerManager) {
    window.timerManager.ticketTitles[ticketId] = ticketTitle;
    Utils.saveToStorage({ 
      [CONFIG.storageKeys.ticketTitles]: window.timerManager.ticketTitles 
    });
  }
  
  // Create timer icon element
  const timerIcon = document.createElement('div');
  timerIcon.className = `ticket-timer-icon ${hasTime || isActive ? 'expanded' : 'minimized'} ${isActive ? 'active' : ''}`;
  timerIcon.setAttribute('data-tooltip', isActive ? 'Pausar cronômetro' : 'Iniciar cronômetro');
  timerIcon.innerHTML = `
    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <!-- Corpo do cronômetro -->
      <circle cx="12" cy="13" r="8" stroke="#FF6F00" stroke-width="2" fill="white"></circle>

      <!-- Botão superior -->
      <rect x="10" y="2" width="4" height="2" rx="1" fill="#FF6F00"></rect>

      <!-- Alça lateral esquerda -->
      <line x1="5" y1="6" x2="7" y2="8" stroke="#FF6F00" stroke-width="2" stroke-linecap="round"></line>

      <!-- Alça lateral direita -->
      <line x1="19" y1="6" x2="17" y2="8" stroke="#FF6F00" stroke-width="2" stroke-linecap="round"></line>

      <!-- Ponteiro -->
      <line x1="12" y1="13" x2="15" y2="10" stroke="#FF6F00" stroke-width="2" stroke-linecap="round"></line>

      <!-- Centro -->
      <circle cx="12" cy="13" r="1" fill="#FF6F00"></circle>
    </svg>
    <span class="timer-display">${hasTime ? Utils.formatTimeWithSeconds(window.timerManager?.ticketTimers[ticketId] || 0) : '00:00:00'}</span>
  `;
  
  // Add click event with visual feedback
  timerIcon.addEventListener('click', (e) => {
    e.stopPropagation(); // Prevent card selection
    
    // Add visual feedback when clicked
    timerIcon.style.transform = 'scale(0.95)';
    setTimeout(() => {
      timerIcon.style.transform = '';
    }, 150);
    
    // Toggle timer if TimerManager exists
    if (window.timerManager) {
      window.timerManager.toggleTimer(ticketId);
    }
  });
  
  // Add right-click event for context menu
  timerIcon.addEventListener('contextmenu', (e) => {
    e.preventDefault();
    e.stopPropagation();
    
    this.showTimerContextMenu(e, ticketId);
  });
  
  // Ensure absolute positioning
  timerIcon.style.position = 'absolute';
  timerIcon.style.top = '8px';
  timerIcon.style.right = '8px';
  timerIcon.style.zIndex = '100';
  
  // Position the container
  elements.ticketCard.style.position = 'relative';
  
  // Append to container
  elements.ticketCard.appendChild(timerIcon);
  
  // Track created element
  this.createdElements.timers.add(timerIcon);
  
  console.log(`Timer added to ticket ${ticketId}: "${ticketTitle}"`);
  
  // Apply active timer styles if this is the active ticket
  if (isActive) {
    this.updateActiveTimerStyles(ticketId, true);
  }
  
  return elements;
}