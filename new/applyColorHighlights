/**
 * Apply color highlights to the card's containers
 */
applyColorHighlights() {
  console.log('Applying color highlights to cards');
  
  // Find all ticket cards
  const cards = document.querySelectorAll(CONFIG.selectors.ticketCardSelector);
  console.log(`Found ${cards.length} cards to highlight`);
  
  cards.forEach(card => {
    // Find all elements in the card hierarchy
    const elements = this.findCardElements(card);
    if (!elements.ticketId) return;
    
    // Elements to apply highlighting to
    const highlightTargets = [
      elements.viewContainer,   // View container (most visible)
      elements.ticketCard,      // The card itself
      elements.tileWrapper      // Tile wrapper
    ].filter(Boolean); // Filter out any null/undefined elements
    
    // Remove existing highlight classes and styles from all targets
    highlightTargets.forEach(target => {
      target.classList.remove('ticket-highlight', 'lane-highlight-entregues', 
        'lane-highlight-dispensados', 'lane-highlight-impedidos', 'owner-highlight');
      target.style.removeProperty('--highlight-color');
    });
    
    // Get ticket information
    const ticketInfo = window.timerManager ? 
      window.timerManager.getTicketInfo(elements.ticketId) : 
      { status: '', cda: '' };
    
    // Check for lane-based highlighting
    const column = card.closest('[data-test-id="cdb-column"]');
    if (column) {
      const phaseNameElement = column.querySelector(CONFIG.selectors.phaseNameSelector);
      if (phaseNameElement) {
        const phaseName = phaseNameElement.textContent.trim();
        
        let highlightClass = '';
        let highlightColor = '';
        
        // Determine highlight class and color based on phase
        if (phaseName === 'Entregues' && this.settings.lanes['Entregues']) {
          highlightClass = 'lane-highlight-entregues';
          highlightColor = this.settings.lanes['Entregues'];
        } else if (phaseName === 'Dispensados' && this.settings.lanes['Dispensados']) {
          highlightClass = 'lane-highlight-dispensados';
          highlightColor = this.settings.lanes['Dispensados'];
        } else if (phaseName === 'Impedidos' && this.settings.lanes['Impedidos']) {
          highlightClass = 'lane-highlight-impedidos';
          highlightColor = this.settings.lanes['Impedidos'];
        }
        
        // Apply lane-based highlighting if applicable
        if (highlightClass && highlightColor) {
          highlightTargets.forEach(target => {
            target.classList.add('ticket-highlight', highlightClass);
            target.style.setProperty('--highlight-color', highlightColor);
          });
        }
      }
    }
    
    // Check for owner-based highlighting (only if not already highlighted by lane)
    if (!highlightTargets[0]?.classList.contains('ticket-highlight')) {
      const ownerName = ticketInfo.cda || '';
      
      let ownerColor = '';
      
      // Check predefined owners
      if (this.settings.owners[ownerName]) {
        ownerColor = this.settings.owners[ownerName];
      }
      // Check custom owners
      else if (this.settings.customOwners) {
        // Check for exact match
        if (this.settings.customOwners[ownerName]) {
          ownerColor = this.settings.customOwners[ownerName];
        }
        // Check for partial matches (for email addresses)
        else {
          for (const [name, color] of Object.entries(this.settings.customOwners)) {
            if (ownerName.toLowerCase().includes(name.toLowerCase()) ||
                name.toLowerCase().includes(ownerName.toLowerCase())) {
              ownerColor = color;
              break;
            }
          }
        }
      }
      
      // Apply owner-based highlighting if applicable
      if (ownerColor) {
        highlightTargets.forEach(target => {
          target.classList.add('ticket-highlight', 'owner-highlight');
          target.style.setProperty('--highlight-color', ownerColor);
        });
      }
    }
  });
}